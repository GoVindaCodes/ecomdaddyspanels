{"version":3,"sources":["services/CategoryServices.js","services/LanguageServices.js","services/AttributeServices.js","services/ProductServices.js","services/CurrencyServices.js","services/CouponServices.js","services/CustomerServices.js","components/Typography/PageTitle.js","hooks/useFilter.js"],"names":["CategoryServices","getAllCategory","async","requests","get","getAllcategory","getCategoryById","id","addCategory","post","body","addAllCategory","updateCategory","put","updateStatus","deleteCategory","console","log","response","delete","error","updateManyCategory","ids","status","patch","deleteManyCategory","LanguageServices","getAllLanguages","getShowingLanguage","getLanguageById","addLanguage","addAllLanguage","updateLanguage","updateManyLanguage","deleteLanguage","deleteManyLanguage","AttributeServices","getAllAttributes","type","option","option1","_ref","getShowingAttributes","addAttribute","addAllAttributes","getAttributeById","updateAttributes","updateChildAttributes","_ref2","deleteAttribute","deleteChildAttribute","_ref3","updateManyAttribute","deleteManyAttribute","updateManyChildAttribute","deleteManyChildAttribute","ProductServices","getAllProducts","getProductById","getProductBySlug","slug","addProduct","addAllProducts","updateProduct","updateManyProducts","deleteProduct","deleteManyProducts","CurrencyServices","getAllCurrency","getShowingCurrency","getCurrencyById","addCurrency","addAllCurrency","updateCurrency","updateManyCurrencies","updateEnabledStatus","updateLiveExchangeRateStatus","deleteCurrency","deleteManyCurrency","CouponServices","addCoupon","addAllCoupon","getAllCoupons","getCouponById","updateCoupon","updateManyCoupons","deleteCoupon","deleteManyCoupons","CustomerServices","getAllCustomers","registerCustomer","token","loginCustomer","signUpWithProvider","forgetPassword","resetPassword","changePassword","addAllCustomers","getCustomerById","updateCustomer","deleteCustomer","PageTitle","children","_jsx","className","categorySchema","properties","_id","name","description","icon","required","attributeSchema","title","variants","couponSchema","couponCode","endTime","discountPercentage","minimumAmount","productType","logo","discountType","customerSchema","email","useFilter","data","ajv","Ajv","allErrors","filter","setFilter","useState","sortedField","setSortedField","searchText","setSearchText","searchUser","setSearchUser","searchCoupon","setSearchCoupon","searchOrder","setSearchOrder","categoryType","setCategoryType","attributeTitle","setAttributeTitle","country","setCountry","zone","setZone","language","setLanguage","currency","setCurrency","pending","setPending","processing","setProcessing","delivered","setDelivered","setStatus","role","setRole","time","setTime","currentPage","setCurrentPage","dataTable","setDataTable","todayOrder","setTodayOrder","monthlyOrder","setMonthlyOrder","totalOrder","setTotalOrder","selectedFile","setSelectedFile","filename","setFileName","isDisabled","setIsDisable","shipping","setShipping","newProducts","currencyRef","useRef","searchRef","userRef","couponRef","orderRef","categoryRef","attributeRef","countryRef","languageRef","taxRef","shippingRef","dayjs","isBetween","isToday","location","useLocation","lang","setIsUpdate","setLoading","useContext","SidebarContext","globalSetting","useAsync","SettingServices","getGlobalSetting","serviceData","useMemo","date","Date","setDate","getDate","services","map","el","newDate","updatedAt","toLocaleString","timeZone","default_time_zone","updatedDate","pathname","_services","_services2","_services3","_services4","_services5","_services6","orderPending","statusP","orderProcessing","statusO","orderDelivered","statusD","todayServices","order","createdAt","reduce","preValue","currentValue","total","monthlyServices","_services7","item","parent","sort","a","b","price","search","_search$title","toLowerCase","includes","_search$title$lang","_search$title$lang$to","_search$attribute","attribute","category","lowercaseCategoryType","some","child","staff","_search$name$lang","_search$phone","_search$email","phone","_search$title$lang2","_search$title$lang2$t","_search$couponCode","user_info","cou","_cou$name","_cou$iso_code","iso_code","ship","lan","isoCode","languageCode","language_code","cur","totalResults","length","useEffect","slice","handleChangePage","p","resultsPerPage","handleSubmitUser","e","preventDefault","current","value","handleSubmitForAll","handleSubmitCoupon","handleSubmitOrder","handleSubmitCategory","handleSubmitAttribute","handleOnDrop","i","push","handleUploadProducts","notifyError","then","res","notifySuccess","message","catch","err","handleSubmitCountry","handleSubmitLanguage","handleSelectFile","_e$target","fileReader","FileReader","file","target","files","readAsText","onload","text","JSON","parse","result","parentName","parentId","password","event","json","csvToJson","fromString","rABS","readAsBinaryString","bstr","wb","XLSX","bookVBA","wsname","SheetNames","ws","Sheets","sheet_to_json","readAsArrayBuffer","handleUploadMultiple","isBelowThreshold","validate","every","customerDataValidation","validationData","handleRemoveSelectFile","setTimeout","handleSubmitCurrency","handleSubmitShipping"],"mappings":"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","file":"static/js/4.9598cd8f.chunk.js","sourcesContent":["// // // import categoryData from \"utils/category\";\n// // import requests from \"./httpService\";\n\n// // const CategoryServices = {\n// //   getAllCategory: async () => {\n// //     return requests.get(\"/category\");\n// //     // return []\n// //     // return categoryData;\n// //   },\n\n// //   getAllcategory: async () => {\n// //     return requests.get(\"/category/all\");\n// //     // return []\n// //     // return categoryData;\n// //   },\n\n// //   getCategoryById: async (id) => {\n// //     return requests.get(`/category/${id}`);\n// //     // return [];\n\n// //   },\n\n// //   addCategory: async (body) => {\n// //     return requests.post(\"/category/add\", body);\n// //     // return [];\n\n// //   },\n\n// //   // addCategory: async (newCategory) => {\n// //   //   console.log(\"New Category:\", newCategory);\n// //   //   try {\n// //   //     await new Promise(resolve => setTimeout(resolve, 1000));\n// //   //     categoryData.push(newCategory);\n// //   //     console.log(\"Updated Category Data:\", categoryData);\n// //   //     return { success: true, message: \"Category added successfully\", data: newCategory };\n// //   //   } catch (error) {\n// //   //     console.error(\"Error adding category:\", error);\n// //   //     return { success: false, message: \"Failed to add category\" };\n// //   //   }\n// //   // },\n\n\n// //   addAllCategory: async (body) => {\n// //     return requests.post(\"/category/add/all\", body);\n// //     // return [];\n\n// //   },\n\n// //   updateCategory: async (id, body) => {\n// //     return requests.put(`/category/${id}`, body);\n// //   },\n\n// //   updateStatus: async (id, body) => {\n// //     return requests.put(`/category/status/${id}`, body);\n// //   },\n\n// //   deleteCategory: async (id) => {\n// //     //   try {\n// //     //     console.log(\"Deleting category with ID:\", id);\n// //     //     console.log(\"Before deletion:\", categoryData);\n// //     //     await new Promise(resolve => setTimeout(resolve, 1000));\n// //     //     categoryData = categoryData.filter(category => category._id !== id);\n// //     //     console.log(\"After deletion:\", categoryData);\n// //     //     return { success: true, message: \"Category deleted successfully\" };\n// //     //   } catch (error) {\n// //     //     console.error(\"Error deleting category:\", error);\n// //     //     return { success: false, message: \"Failed to delete category\" };\n// //     //   }\n// //     // },\n\n\n\n// //     // deleteCategory: async (id, body) => {\n// //     //   console.log(\"Request Body:\", body);\n// //     //   const { ids } = body;\n// //     //   try {\n// //     //     await new Promise(resolve => setTimeout(resolve, 1000));\n// //     //     const updatedcategory = categoryData.filter(category => category._id !== id);\n// //     //     categoryData.length = 0;\n// //     //     updatedcategory.forEach(category => categoryData.push(category));\n// //     //     console.log(\"Updated category:\", updatedcategory);\n// //     //     return { success: true, message: \"Category deleted successfully\", data: updatedcategory };\n// //     //   } catch (error) {\n// //     //     return { success: false, message: \"Failed to delete category\" };\n// //     //   }\n// //     // },\n\n\n// //     updateManyCategory: async (body) => {\n// //       return requests.patch(\"/category/update/many\", body);\n// //       // return [];\n\n// //     },\n\n// //       deleteManyCategory: async (body) => {\n// //         return requests.patch(\"/category/delete/many\", body);\n// //         // return [];\n// //       }\n// //   },\n// // };\n\n// // export default CategoryServices;\n\n\n\n\n// // justt added For Now Heree Justt Checkings\n\n\n// import requests from \"./httpService\";\n\n// const CategoryServices = {\n//   getAllCategory: async () => {\n//     return requests.get(\"/category\");\n//     // return []\n//   },\n\n//   getAllcategory: async () => {\n//     return requests.get(\"/category/all\");\n//     // return [];\n//   },\n\n//   getCategoryById: async (id) => {\n//     return requests.get(`/category/${id}`);\n//     // return [];\n//   },\n\n//   addCategory: async (body) => {\n//     console.log(\"datas :\", body)\n//     console.log(\"datas name :\", body.name.en)\n//     return requests.post(\"/category\", { body, name: body.name.en });\n//     // return [];\n//   },\n\n//   addAllCategory: async (body) => {\n//     return requests.post(\"/category/add/all\", body);\n//     // return [];\n\n//   },\n\n//   updateCategory: async (id, body) => {\n//     return requests.put(`/category/${id}`, body);\n//   },\n\n//   updateStatus: async (id, body) => {\n//     return requests.put(`/category/status/${id}`, body);\n//   },\n\n//   deleteCategory: async (id, body) => {\n//     return requests.delete(`/category/${id}`, body);\n//   },\n\n//   updateManyCategory: async (body) => {\n//     const { ids, status } = body;\n\n//     return requests.patch(\"/category/update/many\", { ids, status });\n//     // return [];\n//   },\n\n//   deleteManyCategory: async (body) => {\n//     // console.log(\"datas :\", body.ids)\n//     return requests.patch(\"/category/delete/many\", body.ids);\n//     // return [];\n\n//   },\n// };\n\n// export default CategoryServices;\n\n\n\n\n// new ones according to the backend from nodee js\n\nimport requests from \"./httpService\";\n\nconst CategoryServices = {\n  getAllCategory: async () => {\n    return requests.get(\"/api/category/all\");\n  },\n\n  getAllcategory: async () => {\n    return requests.get(\"/api/category\");\n  },\n\n  getCategoryById: async (id) => {\n    return requests.get(`/api/category/${id}`); // Updated route\n  },\n\n  addCategory: async (body) => {\n    return requests.post(\"/api/category/add\", body); // Updated route\n  },\n\n  addAllCategory: async (body) => {\n    return requests.post(\"/api/category/add/all\", body); // Updated route\n  },\n\n  updateCategory: async (id, body) => {\n    return requests.put(`/api/category/${id}`, body); // Updated route\n  },\n\n  updateStatus: async (id, body) => {\n    return requests.put(`/api/category/status/${id}`, body); // Updated route\n  },\n\n  // deleteCategory: async (id) => {\n  //   console.log(\"ids : \", id)\n  //   return requests.delete(`/api/category/${id}`); // Updated route\n  // },\n  deleteCategory: async (id) => {\n    console.log(\"Request to delete category with ID:\", id);\n\n    try {\n      const response = await requests.delete(`/api/category/${id}`);\n      console.log(\"Response from backend:\", response);\n\n      return response;\n    } catch (error) {\n      console.error(\"Error from backend:\", error);\n    }\n  },\n\n  updateManyCategory: async (body) => {\n    const { ids, status } = body;\n    return requests.patch(\"/api/category/update/many\", { ids, status }); // Updated route\n  },\n\n  deleteManyCategory: async (body) => {\n    return requests.patch(\"/api/category/delete/many\", body); // Updated route\n  },\n};\n\nexport default CategoryServices;\n","// import requests from './httpService';\n\n// const LanguageServices = {\n//   getAllLanguages: async () => {\n//     return requests.get('/api/language/show');\n//     // return requests.get('/language/all');\n//     // return []\n//   },\n\n//   // Commented for just noww\n//   // getShowingLanguage: async () => {\n//   //   return requests.get('/languages/show');\n//   //   // return []\n//   // },\n\n//   getLanguageById: async (id) => {\n//     return requests.get(`/languages/${id}`);\n//     // return requests.get(`/language/${id}`);\n//     // return []\n//   },\n\n//   addLanguage: async (body) => {\n//     return requests.post('/languages', body);\n\n\n//     // return requests.post('/language/add', body);\n\n//     // For Frontend\n//     // const currencies = [];\n//     // try {\n//     //   console.log(\"Adding currency:\", body);\n//     //   await new Promise(resolve => setTimeout(resolve, 1000));\n//     //   currencies.push(body);\n//     //   return { success: true, message: \"currency added successfully\" };\n//     // } catch (error) {\n//     //   return { success: false, message: \"Failed to add currency\" };\n//     // }\n//   },\n\n//   addAllLanguage: async (body) => {\n//     return requests.post('/language/add/all', body);\n//   },\n\n//   updateLanguage: async (id, body) => {\n//     console.log(\"updated Languages\", body)\n//     return requests.put(`/languages/${id}`, body);\n//     // return requests.put(`/language/${id}`, body);\n//   },\n\n//   updateManyLanguage: async (body) => {\n//     const { ids, status } = body;\n//     console.log(\"data\", body);\n\n//     console.log(\"ids\", ids);\n//     console.log(\"status\", status); // Logging the status to verify\n\n//     return requests.patch('languages/update/many', { ids, status }); // Sending both ids and status\n//   },\n\n\n//   updateStatus: async (id, body) => {\n//     // console.log(\"updatestatus data\", body)\n//     // console.log(\"updatestatus id\", id)\n//     return requests.put(`/languages/status/${id}`, body);\n//   },\n\n//   deleteLanguage: async (id, body) => {\n//     return requests.delete(`/languages/${id}`, body);\n//     // return requests.patch(`/language/${id}`, body);\n//   },\n\n//   deleteManyLanguage: async (ids) => {\n//     // console.log(\"Deleting languages with IDs:\", ids);\n//     // // console.log(\"Deleting languages with IDs Heres:\", { data: ids });\n//     return requests.delete('/languages/delete/many', { data: ids.ids }); // Sending just the array of IDs\n//     // return requests.patch('/language/delete/many', body);\n//   },\n// };\n\n// export default LanguageServices;\n\n\n\n//  New Routes \n\nimport requests from './httpService';\n\nconst LanguageServices = {\n  getAllLanguages: async () => {\n    return requests.get('/api/language/all');\n  },\n\n  getShowingLanguage: async () => {\n    return requests.get('/api/language/show');\n  },\n\n  getLanguageById: async (id) => {\n    return requests.get(`/api/language/${id}`);\n  },\n\n  addLanguage: async (body) => {\n    return requests.post('/api/language/add', body);\n  },\n\n  addAllLanguage: async (body) => {\n    return requests.post('/api/language/add/all', body);\n  },\n\n  updateLanguage: async (id, body) => {\n    return requests.put(`/api/language/${id}`, body);\n  },\n\n  updateManyLanguage: async (body) => {\n    const { ids, status } = body;\n    return requests.patch('/api/language/update/many', { ids, status });\n  },\n\n  updateStatus: async (id, body) => {\n    return requests.put(`/api/language/status/${id}`, body);\n  },\n\n  deleteLanguage: async (id) => {\n    return requests.patch(`/api/language/${id}`);\n  },\n\n  deleteManyLanguage: async (ids) => {\n    return requests.patch('/api/language/delete/many', ids);\n  },\n};\n\nexport default LanguageServices;\n","// // import { useState } from 'react';\n// import requests from './httpService';\n// // import languages from 'utils/languages';\n\n\n// const AttributeServices = {\n\n//   getAllAttributes: async ({ type, option, option1 }) => {\n//     return requests.get(\n//       `/attributes?type=${type}&option=${option}&option1=${option1}`\n//     );\n//   },\n\n//   getShowingAttributes: async (body) => {\n//     return requests.get('/attributes', body);\n//     // return requests.get('/attributes/show', body);\n//     // return { type: '1', option: '1', option1: '1' };\n//     // return {};\n\n//   },\n\n//   addAttribute: async (body) => {\n//     return requests.post('/attributes', body);\n//     // return requests.post('/attributes/add', body);\n//     // return {};\n\n//   },\n\n//   // addChildAttribute: async (id, body) => {\n//   //   return requests.put(`/attributes/add/child/${id}`, body);\n//   //   // return {};\n//   // },\n\n//   addAllAttributes: async (body) => {\n//     return requests.post('/attributes/add/all', body);\n//     // return {};\n//     // try {\n//     //   console.log(\"Adding language:\", body);\n//     //   await new Promise(resolve => setTimeout(resolve, 1000));\n//     //   languages.push(body);\n//     //   return { success: true, message: \"Language added successfully\" };\n//     // } catch (error) {\n//     //   return { success: false, message: \"Failed to add language\" };\n//     // }\n//   },\n\n//   getAttributeById: async (id) => {\n//     return requests.get(`/attributes/${id}`);\n//     // return {};\n//   },\n\n//   // getChildAttributeById: async ({ id, ids }) => {\n//   //   return requests.get(`/attributes/child/${id}/${ids}`);\n//   // },\n\n//   updateAttributes: async (id, body) => {\n//     return requests.put(`/attributes/${id}`, body);\n//   },\n\n//   updateChildAttributes: async ({ id, ids }, body) => {\n//     return requests.put(`/attributes/update/child/${ids}/${id}`, body);\n//   },\n\n//   updateStatus: async (id, body) => {\n//     return requests.put(`/attributes/status/${id}`, body);\n//   },\n\n//   updateChildStatus: async (id, body) => {\n//     return requests.put(`/attributes/status/child/${id}`, body);\n//   },\n\n//   deleteAttribute: async (id, body) => {\n//     return requests.delete(`/attributes/${id}`, body);\n//   },\n\n//   deleteChildAttribute: async ({ id, ids }, body) => {\n//     return requests.put(`/attributes/delete/child/${ids}/${id}`, body);\n//   },\n\n//   updateManyAttribute: async (body) => {\n//     return requests.patch('/attributes/update/many', body);\n//   },\n\n//   updateManyChildAttribute: async (body) => {\n//     return requests.patch('/attributes/update/child/many', body);\n//   },\n\n//   deleteManyAttribute: async (body) => {\n//     console.log(\"datas : \", body)\n//     return requests.patch('/attributes/delete/many', body);\n//   },\n\n//   deleteManyChildAttribute: async (body) => {\n//     return requests.patch('/attributes/delete/child/many', body);\n//   },\n// };\n\n// export default AttributeServices;\n\n\n// for backend now avaible change it when needed\n\n\n// import requests from './httpService';\n\n// const AttributeServices = {\n//   getAllAttributes: async ({ type, option, option1 }) => {\n//     return requests.get(\n//       // `/api/attributes?type=${type}&option=${option}&option1=${option1}\n//       `/api/attributes`\n//     );\n//   },\n\n//   getShowingAttributes: async () => {\n//     return requests.get('/api/attributes/show');\n//   },\n\n//   addAttribute: async (body) => {\n//     return requests.post('/api/attributes/add', body);\n//   },\n\n//   addAllAttributes: async (body) => {\n//     return requests.post('/api/attributes/add/all', body);\n//   },\n\n//   getAttributeById: async (id) => {\n//     return requests.get(`/api/attributes/${id}`);\n//   },\n\n//   updateAttributes: async (id, body) => {\n//     return requests.put(`/api/attributes/${id}`, body);\n//   },\n\n//   updateChildAttributes: async ({ id, ids }, body) => {\n//     return requests.put(`/api/attributes/update/child/${ids}/${id}`, body);\n//   },\n\n//   updateStatus: async (id, body) => {\n//     return requests.put(`/api/attributes/status/${id}`, body);\n//   },\n\n//   deleteAttribute: async (id) => {\n//     console.log(\":id \", id)\n//     return requests.delete(`/api/attributes/${id}`);\n//   },\n\n//   deleteChildAttribute: async ({ id, ids }, body) => {\n//     return requests.put(`/api/attributes/delete/child/${ids}/${id}`, body);\n//   },\n\n//   updateManyAttribute: async (body) => {\n//     return requests.patch('/api/attributes/update/many', body);\n//   },\n\n//   deleteManyAttribute: async (body) => {\n//     console.log(\"idsssssssss : \", body)\n//     return requests.delete('/api/attributes/delete/many', body);\n//   },\n\n//   updateManyChildAttribute: async (body) => {\n//     return requests.patch('/api/attributes/delete/child/many', body);\n//   },\n\n//   deleteManyChildAttribute: async (body) => {\n//     return requests.patch('/api/attributes/delete/child/many', body);\n//   }\n// };\n\n// export default AttributeServices;\n\n\n\n// // import { useState } from 'react';\n// import requests from './httpService';\n// // import languages from 'utils/languages';\n\n\n// const AttributeServices = {\n\n//   getAllAttributes: async ({ type, option, option1 }) => {\n//     return requests.get(\n//       `/attributes?type=${type}&option=${option}&option1=${option1}`\n//     );\n//   },\n\n//   getShowingAttributes: async (body) => {\n//     return requests.get('/attributes', body);\n//     // return requests.get('/attributes/show', body);\n//     // return { type: '1', option: '1', option1: '1' };\n//     // return {};\n\n//   },\n\n//   addAttribute: async (body) => {\n//     return requests.post('/attributes', body);\n//     // return requests.post('/attributes/add', body);\n//     // return {};\n\n//   },\n\n//   // addChildAttribute: async (id, body) => {\n//   //   return requests.put(`/attributes/add/child/${id}`, body);\n//   //   // return {};\n//   // },\n\n//   addAllAttributes: async (body) => {\n//     return requests.post('/attributes/add/all', body);\n//     // return {};\n//     // try {\n//     //   console.log(\"Adding language:\", body);\n//     //   await new Promise(resolve => setTimeout(resolve, 1000));\n//     //   languages.push(body);\n//     //   return { success: true, message: \"Language added successfully\" };\n//     // } catch (error) {\n//     //   return { success: false, message: \"Failed to add language\" };\n//     // }\n//   },\n\n//   getAttributeById: async (id) => {\n//     return requests.get(`/attributes/${id}`);\n//     // return {};\n//   },\n\n//   // getChildAttributeById: async ({ id, ids }) => {\n//   //   return requests.get(`/attributes/child/${id}/${ids}`);\n//   // },\n\n//   updateAttributes: async (id, body) => {\n//     return requests.put(`/attributes/${id}`, body);\n//   },\n\n//   updateChildAttributes: async ({ id, ids }, body) => {\n//     return requests.put(`/attributes/update/child/${ids}/${id}`, body);\n//   },\n\n//   updateStatus: async (id, body) => {\n//     return requests.put(`/attributes/status/${id}`, body);\n//   },\n\n//   updateChildStatus: async (id, body) => {\n//     return requests.put(`/attributes/status/child/${id}`, body);\n//   },\n\n//   deleteAttribute: async (id, body) => {\n//     return requests.delete(`/attributes/${id}`, body);\n//   },\n\n//   deleteChildAttribute: async ({ id, ids }, body) => {\n//     return requests.put(`/attributes/delete/child/${ids}/${id}`, body);\n//   },\n\n//   updateManyAttribute: async (body) => {\n//     return requests.patch('/attributes/update/many', body);\n//   },\n\n//   updateManyChildAttribute: async (body) => {\n//     return requests.patch('/attributes/update/child/many', body);\n//   },\n\n//   deleteManyAttribute: async (body) => {\n//     console.log(\"datas : \", body)\n//     return requests.patch('/attributes/delete/many', body);\n//   },\n\n//   deleteManyChildAttribute: async (body) => {\n//     return requests.patch('/attributes/delete/child/many', body);\n//   },\n// };\n\n// export default AttributeServices;\n\n\n// for backend now avaible change it when needed\n\n\nimport requests from './httpService';\n\nconst AttributeServices = {\n  getAllAttributes: async ({ type, option, option1 }) => {\n    return requests.get(\n      // `/api/attributes?type=${type}&option=${option}&option1=${option1}\n      `/api/attributes`\n    );\n  },\n\n  getShowingAttributes: async () => {\n    return requests.get('/api/attributes/show');\n  },\n\n  addAttribute: async (body) => {\n    return requests.post('/api/attributes/add', body);\n  },\n\n  addAllAttributes: async (body) => {\n    return requests.post('/api/attributes/add/all', body);\n  },\n\n  getAttributeById: async (id) => {\n    return requests.get(`/api/attributes/${id}`);\n  },\n\n  updateAttributes: async (id, body) => {\n    return requests.put(`/api/attributes/${id}`, body);\n  },\n\n  updateChildAttributes: async ({ id, ids }, body) => {\n    return requests.put(`/api/attributes/update/child/${ids}/${id}`, body);\n  },\n\n  updateStatus: async (id, body) => {\n    return requests.put(`/api/attributes/status/${id}`, body);\n  },\n\n  deleteAttribute: async (id) => {\n    console.log(\":id \", id)\n    return requests.delete(`/api/attributes/${id}`);\n  },\n\n  deleteChildAttribute: async ({ id, ids }, body) => {\n    return requests.put(`/api/attributes/delete/child/${ids}/${id}`, body);\n  },\n\n  updateManyAttribute: async (body) => {\n    return requests.patch('/api/attributes/update/many', body);\n  },\n\n  deleteManyAttribute: async (body) => {\n    return requests.patch('/api/attributes/delete/many', body);\n  },\n\n  updateManyChildAttribute: async (body) => {\n    return requests.patch('/api/attributes/delete/child/many', body);\n  },\n\n  deleteManyChildAttribute: async (body) => {\n    return requests.patch('/api/attributes/delete/child/many', body);\n  }\n};\n\nexport default AttributeServices;\n","// import productData from \"utils/products\";\n// import requests from \"./httpService\";\n\n// const ProductServices = {\n//   getAllProducts: async (\n//     // {page, limit, category, title, price }\n//   ) => {\n//     // const searchCategory = category !== null ? category : \"\";\n//     // const searchTitle = title !== null ? title : \"\";\n//     // const searchPrice = price !== null ? price : \"\";\n\n//     // return requests.get(\n//     //   `/products?page=${page}&limit=${limit}&category=${searchCategory}&title=${searchTitle}&price=${searchPrice}`\n//     // );\n//     return (\n//       { products: [{ _id: 1, title: { en: \"Samsung\" }, prices: { price: 120, discount: 10, originalPrice: 108 }, stock: 10, description: 'description', tag: 'none', category: { name: 'Phones' }, image: ['none'], status: 'none' }] }\n//     );\n//   },\n\n//   getProductById: async (id) => {\n//     // return requests.post(`/products/${id}`);  return (\n//     // return ({ _id: 1, title: { en: \"Samsung\" }, prices: { price: 120, discount: 10, originalPrice: 108 }, stock: 10, description: 'description', tag: 'none', category: { name: 'Phones' }, image: ['none'], status: 'none' }\n//     // );\n//     try {\n//       // Find the product with the specified ID in the productData array\n//       const product = productData.find(product => product._id === id);\n//       if (product) {\n//         return { success: true, data: product };\n//       } else {\n//         return { success: false, message: \"Product not found\" };\n//       }\n//     } catch (error) {\n//       return { success: false, message: \"Failed to fetch product\" };\n//     }\n//   },\n//   // addProduct: async (body) => {\n//   //   return requests.post(\"/products/add\", body);\n//   // },\n//   addProduct: async (body) => {\n//     try {\n//       console.log(\"Adding product:\", body);\n//       await new Promise(resolve => setTimeout(resolve, 1000));\n//       productData.push(body);\n//       return { success: true, message: \"Product added successfully\" };\n//     } catch (error) {\n//       return { success: false, message: \"Failed to add product\" };\n//     }\n//   },\n\n//   // deleteProduct: async (id) => {\n//   //   try {\n//   //     console.log(\"Deleting product with ID:\", id);\n//   //     await new Promise(resolve => setTimeout(resolve, 1000));\n//   //     const updatedProducts = productData.filter(product => product._id !== id);\n//   //     productData.length = 0;\n//   //     updatedProducts.forEach(product => productData.push(product));\n//   //     return { success: true, message: \"Product deleted successfully\" };\n//   //   } catch (error) {\n//   //     return { success: false, message: \"Failed to delete product\" };\n//   //   }\n//   // },\n//   addAllProducts: async (body) => {\n//     return requests.post(\"/products/all\", body);\n//   },\n//   updateProduct: async (id, body) => {\n//     return requests.patch(`/products/${id}`, body);\n//   },\n//   updateManyProducts: async (body) => {\n//     return requests.patch(\"products/update/many\", body);\n//   },\n//   updateStatus: async (id, body) => {\n//     return requests.put(`/products/status/${id}`, body);\n//   },\n\n//   // for now commeneted uncomment for backend integration\n\n//   // deleteProduct: async (id) => {\n//   //   return requests.delete(`/products/${id}`);\n//   // },\n\n//   deleteProduct: async (id) => {\n//     try {\n//       console.log(\"Deleting product with ID:\", id);\n//       await new Promise(resolve => setTimeout(resolve, 1000));\n//       const updatedProducts = productData.filter(product => product._id !== id);\n//       productData.length = 0;\n//       updatedProducts.forEach(product => productData.push(product));\n//       return { success: true, message: \"Product deleted successfully\" };\n//     } catch (error) {\n//       return { success: false, message: \"Failed to delete product\" };\n//     }\n//   },\n\n//   // for now commeneted uncomment for backend integration\n\n//   // deleteManyProducts: async (body) => {\n//   //   return requests.patch(\"/products/delete/many\", body);\n//   // },\n//   deleteManyProducts: async (body) => {\n//     console.log(\"Request Body:\", body);\n//     const { ids } = body;\n//     try {\n//       await new Promise(resolve => setTimeout(resolve, 1000));\n//       const updatedProducts = productData.filter(product => !ids.includes(product._id));\n//       productData.length = 0;\n//       updatedProducts.forEach(product => productData.push(product));\n//       return { success: true, message: \"Products deleted successfully\", data: updatedProducts };\n//     } catch (error) {\n//       return { success: false, message: \"Failed to delete products\" };\n//     }\n//   }\n// };\n\n// export default ProductServices;\n\n\n\n\n// new backendss addedds\n\nimport requests from './httpService';\n\nconst ProductServices = {\n  getAllProducts: async () => {\n    return requests.get(\"/api/products\");\n  },\n\n  //  just added for slugss\n  //  updated the routes as well heree for now\n  getProductById: async (id) => {\n    return requests.get(`/api/products/product/${id}`);\n  },\n\n  //  just added for slugss\n\n  getProductBySlug: async (slug) => {\n    return requests.get(`/api/products/product/${slug}`);\n  },\n\n  addProduct: async (body) => {\n    return requests.post(\"/api/products/add\", body);\n  },\n\n  addAllProducts: async (body) => {\n    return requests.post(\"/api/products/all\", body);\n  },\n\n  updateProduct: async (id, body) => {\n    return requests.patch(`/api/products/${id}`, body);\n  },\n\n  updateManyProducts: async (body) => {\n    return requests.patch(\"/api/products/update/many\", body);\n  },\n\n  updateStatus: async (id, body) => {\n    return requests.put(`/api/products/status/${id}`, body);\n  },\n\n  deleteProduct: async (id) => {\n    return requests.delete(`/api/products/${id}`);\n  },\n\n  deleteManyProducts: async (body) => {\n    return requests.patch(\"/api/products/delete/many\", body);\n  }\n};\n\nexport default ProductServices;\n","// import currencies from 'utils/currency';\n// import requests from './httpService';\n\n// const CurrencyServices = {\n//   getAllCurrency: async () => {\n//     return requests.get('/currency');\n//   },\n\n//   getShowingCurrency: async () => {\n//     return requests.get('/currency/show');\n//   },\n\n//   getCurrencyById: async (id) => {\n//     return requests.get(`/currency/${id}`);\n//   },\n\n//   addCurrency: async (body) => {\n//     // return requests.post('/currency/add', body);\n//     // addProduct: async (body) => {\n//     try {\n//       console.log(\"Adding currency:\", body);\n//       await new Promise(resolve => setTimeout(resolve, 1000));\n//       currencies.push(body);\n//       return { success: true, message: \"currency added successfully\" };\n//     } catch (error) {\n//       return { success: false, message: \"Failed to add currency\" };\n//     }\n//     // },\n//   },\n\n//   addAllCurrency: async (body) => {\n//     return requests.post('/currency/add/all', body);\n//   },\n\n//   updateCurrency: async (id, body) => {\n//     return requests.put(`/currency/${id}`, body);\n//   },\n\n//   updateManyCurrencies: async (body) => {\n//     return requests.patch('currency/update/many', body);\n//   },\n\n//   updateEnabledStatus: async (id, body) => {\n//     return requests.put(`/currency/status/enabled/${id}`, body);\n//   },\n\n//   updateLiveExchangeRateStatus: async (id, body) => {\n//     return requests.put(`/currency/status/live-exchange-rates/${id}`, body);\n//   },\n\n\n//   deleteCurrency: async (index) => {\n//     // return requests.delete(`/category/${id}`, body);\n//     try {\n//       console.log(\"Deleting currency at index:\", index);\n//       await new Promise(resolve => setTimeout(resolve, 1000))\n//       currencies.splice(index, 1);\n//       return { success: true, message: \"Currency deleted successfully\" };\n//     } catch (error) {\n//       return { success: false, message: \"Failed to delete currency\" };\n//     }\n//     // console.log(\"5\", body)\n//     // const { ids } = body;\n//     // try {\n//     //   await new Promise(resolve => setTimeout(resolve, 1000));\n//     //   const updatedProducts = currencies.filter(product => !ids.includes(product._id));\n//     //   currencies.length = 0;\n//     //   updatedProducts.forEach(product => currencies.push(product));\n//     //   return { success: true, message: \"Products deleted successfully\", data: updatedProducts };\n//     // } catch (error) {\n//     //   return { success: false, message: \"Failed to delete products\" };\n//     // }\n//   },\n\n\n//   // deleteCurrency: async (index) => {\n\n//   //   console.log(\"5\", body)\n//   //   const { ids } = body;\n//   //   try {\n//   //     await new Promise(resolve => setTimeout(resolve, 1000));\n//   //     const updatedProducts = currencies.filter(product => !ids.includes(product._id));\n//   //     currencies.length = 0;\n//   //     updatedProducts.forEach(product => currencies.push(product));\n//   //     return { success: true, message: \"Products deleted successfully\", data: updatedProducts };\n//   //   } catch (error) {\n//   //     return { success: false, message: \"Failed to delete products\" };\n//   //   }\n//   // },\n\n//   deleteManyCurrency: async (body) => {\n//     // return requests.patch('/currency/delete/many', body);\n//     console.log(\"5\", body);\n//     const { ids, category } = body;\n//     try {\n//       await new Promise(resolve => setTimeout(resolve, 1000));\n//       const updatedCategories = currencies.filter(cat => !ids.includes(cat._id));\n//       currencies.length = 0;\n//       updatedCategories.forEach(cat => currencies.push(cat));\n//       return { success: true, message: \"Categories deleted successfully\", data: updatedCategories };\n//     } catch (error) {\n//       return { success: false, message: \"Failed to delete categories\" };\n//     }\n\n//   },\n// };\n\n// export default CurrencyServices;\n\n\n// for the backend for now addedd heree for you sir yow\n\nimport requests from \"./httpService\";\n\nconst CurrencyServices = {\n  getAllCurrency: async () => {\n    return requests.get('/api/currency');\n  },\n\n  getShowingCurrency: async (data) => {\n    // console.log(\"datas :\", data)\n    return requests.get('/api/currency/show');\n  },\n\n  getCurrencyById: async (id) => {\n    return requests.get(`/api/currency/${id}`);\n  },\n\n  addCurrency: async (body) => {\n    return requests.post('/api/currency/add', body);\n  },\n\n  addAllCurrency: async (body) => {\n    return requests.post('/api/currency/add/all', body);\n  },\n\n  updateCurrency: async (id, body) => {\n    return requests.put(`/api/currency/${id}`, body);\n  },\n\n  updateManyCurrencies: async (body) => {\n    return requests.patch('/api/currency/update/many', body);\n  },\n\n  updateEnabledStatus: async (id, body) => {\n    console.log(\"id : \", id)\n    console.log(\"id : \", body)\n    return requests.put(`/api/currency/status/enabled/${id}`, body);\n  },\n\n  updateLiveExchangeRateStatus: async (id, body) => {\n    return requests.put(`/api/currency/status/live-exchange-rates/${id}`, body);\n  },\n\n  deleteCurrency: async (id) => {\n    return requests.delete(`/api/currency/${id}`);\n  },\n\n  deleteManyCurrency: async (body) => {\n    return requests.patch('/api/currency/delete/many', body);\n  },\n};\n\nexport default CurrencyServices;\n","// // import coupons from 'utils/coupons';\n// import requests from './httpService';\n\n// const CouponServices = {\n//   addCoupon: async (body) => {\n//     return requests.post('/coupons/add', body);\n//     // return [];\n//     // try {\n//     //   console.log(\"Adding coupons:\", body);\n//     //   await new Promise(resolve => setTimeout(resolve, 1000));\n//     //   coupons.push(body);\n//     //   return { success: true, message: \"coupons added successfully\" };\n//     // } catch (error) {\n//     //   return { success: false, message: \"Failed to add coupons\" };\n//     // }\n//   },\n//   addAllCoupon: async (body) => {\n//     return requests.post('/api/coupons/add/all', body);\n//     // return [];\n\n//   },\n//   getAllCoupons: async () => {\n//     return requests.get('/api/coupon');\n//     // return [];\n\n//   },\n//   getCouponById: async (id) => {\n//     return requests.get(`/coupons/${id}`);\n//     // return [];\n//   },\n//   updateCoupon: async (id, body) => {\n//     return requests.put(`/coupons/${id}`, body);\n//     // return [];\n//   },\n//   // updateManyCoupons: async (body) => {\n//   //   console.log(\"id\", body)\n//   //   console.log(\"data\", body.ids)\n//   //   return requests.patch('/coupons/update/many', { ids, status });\n//   // },\n//   updateManyCoupons: async (body) => {\n//     console.log(\"id\", body);\n//     console.log(\"data\", body.ids);\n\n//     const { ids, status } = body; // Destructuring ids and status from body\n\n//     return requests.patch('/coupons/update/many', { ids, status });\n//   },\n\n//   updateStatus: async (id, body) => {\n//     console.log(\"id\", id)\n//     console.log(\"data\", body)\n//     return requests.put(`/coupons/status/${id}`, body);\n//   },\n\n//   deleteCoupon: async (id) => {\n//     return requests.delete(`/coupons/${id}`);\n//   },\n\n//   // deleteCoupon: async (id) => {\n//   //   try {\n//   //     await new Promise(resolve => setTimeout(resolve, 1000));\n//   //     const updatedCoupons = coupons.filter(coupon => coupon._id !== id);\n//   //     coupons.length = 0;\n//   //     updatedCoupons.forEach(coupon => coupons.push(coupon));\n//   //     return { success: true, message: \"Coupon deleted successfully\" };\n//   //   } catch (error) {\n//   //     return { success: false, message: \"Error deleting coupon\" };\n//   //   }\n//   // },\n\n//   deleteManyCoupons: async (body) => {\n//     console.log(\"ids\", body.ids);\n//     return requests.patch(`/coupons/delete/many`, body.ids);\n//   },\n\n//   // deleteManyCoupons: async (body) => {\n//   //   const { ids } = body;\n\n//   //   try {\n\n//   //     await new Promise(resolve => setTimeout(resolve, 1000));\n//   //     // const updatedProducts = productData.filter(product => !ids.includes(product._id));\n//   //     console.log(\"coupons Before Deletion : \", body)\n//   //     const updatedCoupons = coupons.filter(coupons => !ids.includes(coupons._id));\n//   //     updatedCoupons.length = 0;\n//   //     updatedCoupons.forEach(coupon => coupons.push(coupon));\n//   //     console.log(\"coupons After Deletion : \", updatedCoupons)\n//   //     return { success: true, message: \"Coupons Deleted Successfully\" }\n//   //   } catch (error) {\n//   //     return { success: false, message: \"hi\" }\n//   //   }\n\n//   // }\n\n// };\n\n// export default CouponServices;\n\n\n\n// addedd new for the backend for now sir\n\n\nimport requests from './httpService';\n\nconst CouponServices = {\n  addCoupon: async (body) => {\n    return requests.post('/api/coupon/add', body);\n  },\n\n  addAllCoupon: async (body) => {\n    return requests.post('/api/coupon/add/all', body);\n  },\n\n  getAllCoupons: async () => {\n    return requests.get('/api/coupon');\n  },\n\n  getCouponById: async (id) => {\n    return requests.get(`/api/coupon/${id}`);\n  },\n\n  updateCoupon: async (id, body) => {\n    return requests.put(`/api/coupon/${id}`, body);\n  },\n\n  updateManyCoupons: async (body) => {\n    const { ids, status } = body;\n    return requests.patch('/api/coupon/update/many', { ids, status });\n  },\n\n  updateStatus: async (id, body) => {\n    return requests.put(`/api/coupon/status/${id}`, body);\n  },\n\n  deleteCoupon: async (id) => {\n    return requests.delete(`/api/coupon/${id}`);\n  },\n\n  deleteManyCoupons: async (body) => {\n    return requests.patch('/api/coupon/delete/many', body);\n  }\n};\n\nexport default CouponServices;\n","// import requests from \"./httpService\";\n\n// const CustomerServices = {\n//   getAllCustomers: async () => {\n//     // return ([{ id: 1, name: 'Rohit', JoiningDate: '16/06/2013', email: 'customer@test.com', phone: '9034182898' }])\n//     return requests.post(\"/api/customer\");\n\n//   },\n//   // getAllCustomers: async ({ searchText = \"\" }) => {\n//   //   return requests.get(`/customer?searchText=${searchText}`);\n\n//   // }\n\n//   addAllCustomers: async (body) => {\n//     return requests.post(\"/customer/add/all\", body);\n//   },\n//   // user create\n//   createCustomer: async (body) => {\n//     return requests.post(`/customer/create`, body);\n//   },\n\n//   filterCustomer: async (email) => {\n//     return requests.post(`/customer/filter/${email}`);\n//   },\n\n//   getCustomerById: async (id) => {\n//     return requests.get(`/customer/${id}`);\n//   },\n\n//   updateCustomer: async (id, body) => {\n//     return requests.put(`/customer/${id}`, body);\n//   },\n\n//   deleteCustomer: async (id) => {\n//     return requests.delete(`/customer/${id}`);\n//   },\n// };\n\n// export default CustomerServices;\n\n\n\nimport requests from \"./httpService\";\n\nconst CustomerServices = {\n  getAllCustomers: async () => {\n    return requests.get(\"/api/customer\");\n  },\n  registerCustomer: async (token, body) => {\n    return requests.post(`/api/customer/register/${token}`, body);\n  },\n  loginCustomer: async (body) => {\n    return requests.post(\"/api/customer/login\", body);\n  },\n  signUpWithProvider: async (token, body) => {\n    return requests.post(`/api/customer/signup/${token}`, body);\n  },\n  forgetPassword: async (body) => {\n    return requests.put(\"/api/customer/forget-password\", body);\n  },\n  resetPassword: async (body) => {\n    return requests.put(\"/api/customer/reset-password\", body);\n  },\n  changePassword: async (body) => {\n    return requests.post(\"/api/customer/change-password\", body);\n  },\n  addAllCustomers: async (body) => {\n    return requests.post(\"/api/customer/add/all\", body);\n  },\n  getCustomerById: async (id) => {\n    return requests.get(`/api/customer/${id}`);\n  },\n  updateCustomer: async (id, body) => {\n    console.log(\"data : \", body)\n    return requests.put(`/api/customer/${id}`, body);\n  },\n  deleteCustomer: async (id) => {\n    return requests.delete(`/api/customer/${id}`);\n  },\n};\n\nexport default CustomerServices;\n","import React from 'react'\n\nconst PageTitle = ({ children }) => {\n  return (\n    <h1 className=\"my-6 text-lg font-bold text-gray-700 dark:text-gray-300\">{children}</h1>\n  )\n}\n\nexport default PageTitle\n","import Ajv from \"ajv\";\nimport csvToJson from \"csvtojson\";\nimport * as dayjs from \"dayjs\";\nimport isBetween from \"dayjs/plugin/isBetween\";\nimport isToday from \"dayjs/plugin/isToday\";\nimport { useContext, useEffect, useMemo, useRef, useState } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport * as XLSX from \"xlsx\";\nimport { SidebarContext } from \"context/SidebarContext\";\nimport AttributeServices from \"services/AttributeServices\";\nimport CategoryServices from \"services/CategoryServices\";\nimport CouponServices from \"services/CouponServices\";\nimport CurrencyServices from \"services/CurrencyServices\";\nimport CustomerServices from \"services/CustomerServices\";\nimport LanguageServices from \"services/LanguageServices\";\nimport ProductServices from \"services/ProductServices\";\nimport SettingServices from \"services/SettingServices\";\nimport { notifyError, notifySuccess } from \"utils/toast\";\nimport useAsync from \"./useAsync\";\n\nconst categorySchema = {\n  type: \"object\",\n  properties: {\n    _id: { type: \"string\" },\n    name: { type: \"object\" },\n    description: { type: \"object\" },\n    icon: { type: \"string\" },\n    status: { type: \"string\" },\n  },\n  required: [\"name\"],\n};\nconst attributeSchema = {\n  type: \"object\",\n  properties: {\n    status: { type: \"string\" },\n    title: { type: \"object\" },\n    name: { type: \"object\" },\n    variants: { type: \"array\" },\n    option: { type: \"string\" },\n    type: { type: \"string\" },\n  },\n  required: [\"name\", \"title\"],\n};\nconst couponSchema = {\n  type: \"object\",\n  properties: {\n    title: { type: \"object\" },\n    couponCode: { type: \"string\" },\n    endTime: { type: \"string\" },\n    discountPercentage: { type: \"number\" },\n    minimumAmount: { type: \"number\" },\n    productType: { type: \"string\" },\n    logo: { type: \"string\" },\n    discountType: { type: \"object\" },\n    status: { type: \"string\" },\n  },\n  required: [\"title\", \"couponCode\", \"endTime\", \"status\"],\n};\nconst customerSchema = {\n  type: \"object\",\n  properties: {\n    name: { type: \"string\" },\n    email: { type: \"string\" },\n  },\n  required: [\"name\", \"email\"],\n};\n\nconst useFilter = (data) => {\n  const ajv = new Ajv({ allErrors: true });\n\n  const [filter, setFilter] = useState(\"\");\n  const [sortedField, setSortedField] = useState(\"\");\n  const [searchText, setSearchText] = useState(\"\");\n  const [searchUser, setSearchUser] = useState(\"\");\n  const [searchCoupon, setSearchCoupon] = useState(\"\");\n  const [searchOrder, setSearchOrder] = useState(\"\");\n  const [categoryType, setCategoryType] = useState(\"\");\n  const [attributeTitle, setAttributeTitle] = useState(\"\");\n  const [country, setCountry] = useState(\"\");\n  const [zone, setZone] = useState(\"\");\n  const [language, setLanguage] = useState(\"\");\n  const [currency, setCurrency] = useState(\"\");\n  const [pending, setPending] = useState([]);\n  const [processing, setProcessing] = useState([]);\n  const [delivered, setDelivered] = useState([]);\n  const [status, setStatus] = useState(\"\");\n  const [role, setRole] = useState(\"\");\n  const [time, setTime] = useState(\"\");\n  const [currentPage, setCurrentPage] = useState(1);\n  const [dataTable, setDataTable] = useState([]); //DataTable for showing on table according to filtering\n  const [todayOrder, setTodayOrder] = useState(\"\");\n  const [monthlyOrder, setMonthlyOrder] = useState(\"\");\n  const [totalOrder, setTotalOrder] = useState(\"\");\n  const [selectedFile, setSelectedFile] = useState([]);\n  const [filename, setFileName] = useState(\"\");\n  const [isDisabled, setIsDisable] = useState(false);\n  const [shipping, setShipping] = useState(\"\");\n  const [newProducts] = useState([]);\n  const currencyRef = useRef(\"\");\n  const searchRef = useRef(\"\");\n  const userRef = useRef(\"\");\n  const couponRef = useRef(\"\");\n  const orderRef = useRef(\"\");\n  const categoryRef = useRef(\"\");\n  const attributeRef = useRef(\"\");\n  const countryRef = useRef(\"\");\n  const languageRef = useRef(\"\");\n  const taxRef = useRef(\"\");\n  const shippingRef = useRef(\"\");\n\n\n  dayjs.extend(isBetween);\n  dayjs.extend(isToday);\n  const location = useLocation();\n  const { lang, setIsUpdate, setLoading } = useContext(SidebarContext);\n  const { data: globalSetting } = useAsync(SettingServices.getGlobalSetting);\n  // console.log(\" datas from filters : \", data)\n  //service data filtering\n  const serviceData = useMemo(() => {\n    const date = new Date();\n    date.setDate(date.getDate() - time);\n    let services = data?.map((el) => {\n      const newDate = new Date(el?.updatedAt).toLocaleString(\"en-US\", {\n        timeZone: globalSetting?.default_time_zone,\n      });\n      const newObj = {\n        ...el,\n        updatedDate: newDate === \"Invalid Date\" ? \"\" : newDate,\n      };\n      return newObj;\n    });\n    if (location.pathname === \"/dashboard\") {\n      const orderPending = services?.filter(\n        (statusP) => statusP.status === \"Pending\"\n      );\n      setPending(orderPending);\n      const orderProcessing = services?.filter(\n        (statusO) => statusO.status === \"Processing\"\n      );\n      setProcessing(orderProcessing);\n      const orderDelivered = services?.filter(\n        (statusD) => statusD.status === \"Delivered\"\n      );\n      setDelivered(orderDelivered);\n      //daily total order calculation\n      const todayServices = services?.filter((order) =>\n        dayjs(order.createdAt).isToday()\n      );\n      const todayOrder = todayServices?.reduce(\n        (preValue, currentValue) => preValue + currentValue.total,\n        0\n      );\n      setTodayOrder(todayOrder);\n      //monthly order calculation\n      const monthlyServices = services?.filter((order) =>\n        dayjs(order.createdAt).isBetween(\n          new Date().setDate(new Date().getDate() - 30),\n          new Date()\n        )\n      );\n      const monthlyOrder = monthlyServices?.reduce(\n        (preValue, currentValue) => preValue + currentValue.total,\n        0\n      );\n      setMonthlyOrder(monthlyOrder);\n      //total order calculation\n      const totalOrder = services?.reduce(\n        (preValue, currentValue) => preValue + currentValue.total,\n        0\n      );\n      setTotalOrder(totalOrder);\n    }\n    //products filtering\n    if (filter) {\n      services = services.filter((item) => item.parent === filter);\n    }\n    if (sortedField === \"Low\") {\n      services = services.sort((a, b) => a.price < b.price && -1);\n    }\n    if (sortedField === \"High\") {\n      services = services.sort((a, b) => a.price > b.price && -1);\n    }\n    if (searchText) {\n      services = services.filter((search) =>\n        search?.title?.toLowerCase().includes(searchText.toLowerCase())\n      );\n    }\n\n    if (attributeTitle) {\n      services = services.filter(\n        (search) =>\n          search?.title[lang]\n            ?.toLowerCase()\n            ?.includes(attributeTitle?.toLowerCase()) ||\n          search?.attribute\n            ?.toLowerCase()\n            .includes(attributeTitle?.toLowerCase())\n      );\n    }\n\n    // original Logics of categories before\n    // if (categoryType) {\n    //   services = services.filter(\n    //     (search) =>\n    //       search?.parent[lang]\n    //         ?.toLowerCase()\n    //         ?.includes(categoryType?.toLowerCase()) ||\n    //       search?.category?.toLowerCase().includes(categoryType?.toLowerCase())\n    //   );\n    // }\n\n\n    // if (categoryType) {\n    //   services = services.filter(\n    //     (search) => {\n    //       const parentCategory = search?.name[lang]?.toLowerCase();\n    //       const category = search?.category?.toLowerCase();\n    //       const searchValue = categoryType?.toLowerCase();\n    //       const parentCategoryIncludes = parentCategory?.includes(searchValue);\n    //       const categoryIncludes = category?.includes(searchValue);\n\n    //       console.log(\"Parent Category:\", parentCategory);\n    //       console.log(\"Category:\", category);\n    //       console.log(\"Search Value:\", searchValue);\n    //       console.log(\"Parent Category Includes:\", parentCategoryIncludes);\n    //       console.log(\"Category Includes:\", categoryIncludes);\n\n    //       return parentCategoryIncludes || categoryIncludes;\n    //     }\n    //   );\n    // }\n\n\n    // just added to test the datas replace with original logic when needed\n    if (categoryType) {\n      services = services.filter(category => {\n        const { parent, children } = category;\n        const lowercaseCategoryType = categoryType.toLowerCase();\n\n        console.log(\"Category:\", category);\n        console.log(\"Lowercase Category Type:\", lowercaseCategoryType);\n\n        // Check if the parent category matches\n        if (parent && parent.toLowerCase().includes(lowercaseCategoryType)) {\n          console.log(\"Parent Category Matched:\", parent);\n          return true;\n        }\n\n        // Check if any of the children categories match\n        if (children && children.some(child => child.toLowerCase().includes(lowercaseCategoryType))) {\n          console.log(\"Child Category Matched:\", children);\n          return true;\n        }\n\n        return false;\n      });\n    }\n\n\n\n\n    //admin Filtering\n    if (role) {\n      services = services.filter((staff) => staff.role === role);\n    }\n    //User and Admin filtering\n    if (searchUser) {\n      services = services.filter(\n        (search) =>\n          search?.name[lang]\n            ?.toLowerCase()\n            .includes(searchUser.toLowerCase()) ||\n          search?.phone?.toLowerCase().includes(searchUser.toLowerCase()) ||\n          search?.email?.toLowerCase().includes(searchUser.toLowerCase())\n      );\n    }\n\n    //Coupon filtering\n    if (searchCoupon) {\n      services = services?.filter(\n        (search) =>\n          search?.title[lang]\n            ?.toLowerCase()\n            ?.includes(searchCoupon?.toLowerCase()) ||\n          search?.couponCode\n            ?.toLowerCase()\n            .includes(searchCoupon?.toLowerCase())\n      );\n    }\n    // order filtering\n    if (status) {\n      services = services.filter((order) => order.status === status);\n    }\n    if (searchOrder) {\n      services = services.filter((order) =>\n        // Added By : Govinda 04/23/2023 just for thiss dataa\n        order.user_info.name.toLowerCase().includes(searchOrder.toLowerCase())\n      );\n    }\n    if (time) {\n      services = services.filter((order) =>\n        dayjs(order.createdAt).isBetween(date, new Date())\n      );\n    }\n\n    //country filtering\n    if (country) {\n      services = services.filter(\n        (cou) =>\n          cou?.name?.toLowerCase().includes(country.toLowerCase()) ||\n          cou?.iso_code?.toLowerCase().includes(country.toLowerCase())\n      );\n    }\n\n    //shipping filtering\n    if (shipping) {\n      services = services.filter((ship) =>\n        ship?.name.toLowerCase().includes(shipping.toLowerCase())\n      );\n    }\n\n    // previous Logics\n\n    //language filtering\n    // if (language) {\n    //   services = services.filter(\n    //     (lan) =>\n    //       lan.name.toLowerCase().includes(language.toLowerCase()) ||\n    //       lan.iso_code.toLowerCase().includes(language.toLowerCase()) ||\n    //       lan.language_code.toLowerCase().includes(language.toLowerCase())\n    //   );\n    // }\n\n    // Added By : Govinda 4/04/2024\n\n    if (language) {\n      services = services.filter((lan) => {\n        const name = lan.name ? lan.name.toLowerCase() : '';\n        const isoCode = lan.iso_code ? lan.iso_code.toLowerCase() : '';\n        const languageCode = lan.language_code ? lan.language_code.toLowerCase() : '';\n\n        return name.includes(language.toLowerCase()) ||\n          isoCode.includes(language.toLowerCase()) ||\n          languageCode.includes(language.toLowerCase());\n      });\n    }\n    // Added By : Govinda 4/04/2024\n\n    if (currency) {\n      services = services.filter((cur) => {\n        const isoCode = cur && cur.name ? cur.name.toLowerCase() : '';\n        return isoCode.includes(currency.toLowerCase());\n      });\n    }\n\n    // previous Logics\n\n    // if (currency) {\n    //   services = services.filter((cur) =>\n    //     cur.iso_code.toLowerCase().includes(currency.toLowerCase())\n    //   );\n    // }\n\n    return services;\n  }, [\n    time,\n    data,\n    location.pathname,\n    filter,\n    sortedField,\n    searchText,\n    attributeTitle,\n    categoryType,\n    role,\n    searchUser,\n    searchCoupon,\n    status,\n    searchOrder,\n    country,\n    shipping,\n    language,\n    currency,\n    globalSetting?.default_time_zone,\n    lang,\n  ]);\n\n  //pagination functionality start\n  const resultsPerPage = 10;\n  const totalResults = serviceData?.length;\n  const handleChangePage = (p) => {\n    // console.log('Changing page to:', p);\n    setCurrentPage(p);\n  };\n  useEffect(() => {\n    setDataTable(\n      serviceData?.slice(\n        (currentPage - 1) * resultsPerPage,\n        currentPage * resultsPerPage\n      )\n    );\n  }, [serviceData, currentPage, resultsPerPage]);\n  //pagination functionality end\n  //table form submit function for search start\n  const handleSubmitForAll = (e) => {\n    console.log(\"hi: \", searchRef.current.value)\n    e.preventDefault();\n    setSearchText(searchRef.current.value);\n  };\n  const handleSubmitUser = (e) => {\n    e.preventDefault();\n    setSearchUser(userRef.current.value);\n  };\n  const handleSubmitCoupon = (e) => {\n    e.preventDefault();\n    // console.log(\"hi : \", couponRef.current.value)\n    setSearchCoupon(couponRef.current.value);\n  };\n  const handleSubmitOrder = (e) => {\n    // console.log(\"hi : \", orderRef.current.value)\n    e.preventDefault();\n    setSearchOrder(orderRef.current.value);\n  };\n  const handleSubmitCategory = (e) => {\n    e.preventDefault();\n    setCategoryType(categoryRef.current.value);\n  };\n  const handleSubmitAttribute = (e) => {\n    e.preventDefault();\n    setAttributeTitle(attributeRef.current.value);\n  };\n\n  const handleSubmitCountry = (e) => {\n    e.preventDefault();\n    setCountry(countryRef.current.value);\n  };\n\n  const handleSubmitShipping = (e) => {\n    e.preventDefault();\n    setShipping(shippingRef.current.value);\n  };\n  const handleSubmitLanguage = (e) => {\n    e.preventDefault();\n    setLanguage(languageRef.current.value);\n  };\n  const handleSubmitCurrency = (e) => {\n    e.preventDefault();\n    setCurrency(currencyRef.current.value);\n  };\n  // table form submit function for search end\n  // handle submit multiple product data with csv format\n  const handleOnDrop = (data) => {\n    for (let i = 0; i < data.length; i++) {\n      newProducts.push(data[i].data);\n    }\n  };\n  const handleUploadProducts = () => {\n    if (newProducts.length < 1) {\n      notifyError(\"Please upload/select csv file first!\");\n    } else {\n      // notifySuccess('CRUD operation disable for demo!');\n      ProductServices.addAllProducts(newProducts)\n        .then((res) => {\n          notifySuccess(res.message);\n        })\n        .catch((err) => notifyError(err.message));\n    }\n  };\n  const handleSelectFile = (e) => {\n    e.preventDefault();\n\n    const fileReader = new FileReader();\n    const file = e.target?.files[0];\n\n    if (file && file.type === \"application/json\") {\n      setFileName(file?.name);\n      setIsDisable(true);\n\n      fileReader.readAsText(file, \"UTF-8\");\n      fileReader.onload = (e) => {\n        let text = JSON.parse(e.target.result);\n\n        let data = [];\n        if (location.pathname === \"/categories\") {\n          data = text.map((value) => {\n            return {\n              _id: value._id,\n              id: value.id,\n              status: value.status,\n              name: value.name,\n              description: value.description,\n              parentName: value.parentName,\n              parentId: value.parentId,\n              icon: value.icon,\n            };\n          });\n        }\n        if (location.pathname === \"/attributes\") {\n          data = text.map((value) => {\n            return {\n              _id: value._id,\n              status: value.status,\n              title: value.title,\n              name: value.name,\n              variants: value.variants,\n              option: value.option,\n              type: value.type,\n            };\n          });\n        }\n\n        if (location.pathname === \"/coupons\") {\n          data = text.map((value) => {\n            return {\n              title: value.title,\n              couponCode: value.couponCode,\n              endTime: value.endTime,\n              discountPercentage: value.discountPercentage,\n              minimumAmount: value.minimumAmount,\n              productType: value.productType,\n              logo: value.logo,\n              discountType: value.discountType,\n              status: value.status,\n            };\n          });\n        }\n        if (location.pathname === \"/customers\") {\n          data = text.map((value) => {\n            return {\n              name: value.name,\n              email: value.email,\n              password: value.password,\n              phone: value.phone,\n            };\n          });\n        }\n        setSelectedFile(data);\n      };\n    } else if (file && file.type === \"text/csv\") {\n      setFileName(file?.name);\n      setIsDisable(true);\n\n      fileReader.onload = async (event) => {\n        const text = event.target.result;\n        const json = await csvToJson().fromString(text);\n        console.log(\"json\", json);\n        let data = [];\n\n        if (location.pathname === \"/categories\") {\n          data = json.map((value) => {\n            return {\n              _id: value._id,\n              id: value.id,\n              status: value.status,\n              name: JSON.parse(value.name),\n              description: JSON.parse(value.description),\n              parentName: value.parentName,\n              parentId: value.parentId,\n              icon: value.icon,\n            };\n          });\n        }\n        if (location.pathname === \"/attributes\") {\n          data = json.map((value) => {\n            return {\n              status: value.status,\n              title: JSON.parse(value.title),\n              name: JSON.parse(value.name),\n              variants: JSON.parse(value.variants),\n              option: value.option,\n              type: value.type,\n            };\n          });\n        }\n\n        if (location.pathname === \"/coupons\") {\n          data = json.map((value) => {\n            return {\n              title: JSON.parse(value.title),\n              couponCode: value.couponCode,\n              endTime: value.endTime,\n              discountPercentage: value.discountPercentage\n                ? JSON.parse(value.discountPercentage)\n                : 0,\n              minimumAmount: value.minimumAmount\n                ? JSON.parse(value.minimumAmount)\n                : 0,\n              productType: value.productType,\n              logo: value.logo,\n              // discountType: JSON.parse(value.discountType),\n              status: value.status,\n            };\n          });\n        }\n        if (location.pathname === \"/customers\") {\n          data = json.map((value) => {\n            return {\n              name: value.name,\n              email: value.email,\n              password: value.password,\n              phone: value.phone,\n            };\n          });\n        }\n        setSelectedFile(data);\n      };\n      fileReader.readAsText(file);\n    } else {\n      setFileName(file?.name);\n      setIsDisable(true);\n\n      const rABS = !!fileReader.readAsBinaryString;\n\n      fileReader.onload = function (event) {\n        /* Parse data */\n        const bstr = event.target.result;\n        const wb = XLSX.read(bstr, {\n          type: rABS ? \"binary\" : \"array\",\n          bookVBA: true,\n        });\n        /* Get first worksheet */\n        const wsname = wb.SheetNames[0];\n        const ws = wb.Sheets[wsname];\n        /* Convert array of arrays */\n        const json = XLSX.utils.sheet_to_json(ws);\n\n        let data = [];\n\n        if (location.pathname === \"/categories\") {\n          data = json.map((value) => {\n            return {\n              _id: value._id,\n              id: value.id,\n              status: value.status,\n              name: JSON.parse(value.name),\n              description: JSON.parse(value.description),\n              parentName: value.parentName,\n              parentId: value.parentId,\n              icon: value.icon,\n            };\n          });\n        }\n        if (location.pathname === \"/attributes\") {\n          data = json.map((value) => {\n            return {\n              status: value.status,\n              title: JSON.parse(value.title),\n              name: JSON.parse(value.name),\n              variants: JSON.parse(value.variants),\n              option: value.option,\n              type: value.type,\n            };\n          });\n        }\n\n        if (location.pathname === \"/coupons\") {\n          data = json.map((value) => {\n            return {\n              title: JSON.parse(value.title),\n              couponCode: value.couponCode,\n              endTime: value.endTime,\n              discountPercentage: value.discountPercentage,\n              minimumAmount: value.minimumAmount,\n              productType: value.productType,\n              logo: value.logo,\n              // discountType: JSON.parse(value.discountType),\n              status: value.status,\n            };\n          });\n        }\n        if (location.pathname === \"/customers\") {\n          data = json.map((value) => {\n            return {\n              name: value.name,\n              email: value.email,\n              password: value.password ? value.password : \"null\",\n              phone: value.phone ? value.phone : \"null\",\n            };\n          });\n        }\n        setSelectedFile(data);\n      };\n\n      if (rABS) {\n        fileReader.readAsBinaryString(file);\n      } else {\n        fileReader.readAsArrayBuffer(file);\n      }\n    }\n  };\n\n  const handleUploadMultiple = (e) => {\n    notifyError(\"This feature is disabled for demo!\");\n    // return;\n    // console.log('select file', selectedFile, location.pathname);\n    if (selectedFile.length > 1) {\n      if (location.pathname === \"/categories\") {\n        setLoading(true);\n        let categoryDataValidation = selectedFile.map((value) =>\n          ajv.validate(categorySchema, value)\n        );\n\n        const isBelowThreshold = (currentValue) => currentValue === true;\n        const validationData = categoryDataValidation.every(isBelowThreshold);\n\n        if (validationData) {\n          CategoryServices.addAllCategory(selectedFile)\n            .then((res) => {\n              setLoading(false);\n              setIsUpdate(true);\n              notifySuccess(res.message);\n            })\n            .catch((err) => {\n              setLoading(false);\n              notifyError(err ? err.response.data.message : err.message);\n            });\n        } else {\n          notifyError(\"Please enter valid data!\");\n        }\n      }\n      if (location.pathname === \"/customers\") {\n        setLoading(true);\n        let customerDataValidation = selectedFile.map((value) =>\n          ajv.validate(customerSchema, value)\n        );\n\n        const isBelowThreshold = (currentValue) => currentValue === true;\n        const validationData = customerDataValidation.every(isBelowThreshold);\n\n        console.log(validationData);\n        console.log(customerDataValidation);\n\n        if (validationData) {\n          CustomerServices.addAllCustomers(selectedFile)\n            .then((res) => {\n              setLoading(false);\n              setIsUpdate(true);\n              notifySuccess(res.message);\n            })\n            .catch((err) => {\n              setLoading(false);\n              notifyError(err ? err.response.data.message : err.message);\n            });\n        } else {\n          notifyError(\"Please enter valid data!\");\n        }\n      }\n      if (location.pathname === \"/coupons\") {\n        setLoading(true);\n        let attributeDataValidation = selectedFile.map((value) =>\n          ajv.validate(couponSchema, value)\n        );\n\n        const isBelowThreshold = (currentValue) => currentValue === true;\n        const validationData = attributeDataValidation.every(isBelowThreshold);\n\n        if (validationData) {\n          CouponServices.addAllCoupon(selectedFile)\n            .then((res) => {\n              setLoading(false);\n              setIsUpdate(true);\n              notifySuccess(res.message);\n            })\n            .catch((err) => {\n              setLoading(false);\n              notifyError(err ? err.response.data.message : err.message);\n            });\n        } else {\n          notifyError(\"Please enter valid data!\");\n        }\n      }\n      if (location.pathname === \"/attributes\") {\n        setLoading(true);\n        let attributeDataValidation = selectedFile.map((value) =>\n          ajv.validate(attributeSchema, value)\n        );\n\n        const isBelowThreshold = (currentValue) => currentValue === true;\n        const validationData = attributeDataValidation.every(isBelowThreshold);\n\n        if (validationData) {\n          AttributeServices.addAllAttributes(selectedFile)\n            .then((res) => {\n              setLoading(false);\n              setIsUpdate(true);\n              notifySuccess(res.message);\n            })\n            .catch((err) => {\n              setLoading(false);\n              notifyError(err ? err.response.data.message : err.message);\n            });\n        } else {\n          notifyError(\"Please enter valid data!\");\n        }\n      }\n\n      if (location.pathname === \"/languages\") {\n        LanguageServices.addAllLanguage(selectedFile)\n          .then((res) => {\n            setIsUpdate(true);\n            notifySuccess(res.message);\n          })\n          .catch((err) =>\n            notifyError(err ? err.response.data.message : err.message)\n          );\n      }\n\n      if (location.pathname === \"/currencies\") {\n        CurrencyServices.addAllCurrency(selectedFile)\n          .then((res) => {\n            setIsUpdate(true);\n            notifySuccess(res.message);\n          })\n          .catch((err) =>\n            notifyError(err ? err.response.data.message : err.message)\n          );\n      }\n    } else {\n      notifyError(\"Please select a valid .JSON/.CSV/.XLS file first!\");\n    }\n  };\n\n  const handleRemoveSelectFile = (e) => {\n    // console.log('remove');\n    setFileName(\"\");\n    setSelectedFile([]);\n    setTimeout(() => setIsDisable(false), 1000);\n  };\n\n  return {\n    userRef,\n    searchRef,\n    couponRef,\n    orderRef,\n    categoryRef,\n    attributeRef,\n    pending,\n    processing,\n    delivered,\n    todayOrder,\n    monthlyOrder,\n    totalOrder,\n    setFilter,\n    setSortedField,\n    setStatus,\n    setRole,\n    time,\n    setTime,\n    handleChangePage,\n    totalResults,\n    resultsPerPage,\n    dataTable,\n    serviceData,\n    handleSubmitUser,\n    handleSubmitForAll,\n    handleSubmitCoupon,\n    handleSubmitOrder,\n    handleSubmitCategory,\n    handleSubmitAttribute,\n    handleOnDrop,\n    handleUploadProducts,\n    countryRef,\n    country,\n    setCountry,\n    zone,\n    setZone,\n    handleSubmitCountry,\n    languageRef,\n    handleSubmitLanguage,\n    handleSelectFile,\n    handleUploadMultiple,\n    filename,\n    isDisabled,\n    handleRemoveSelectFile,\n    taxRef,\n    currencyRef,\n    handleSubmitCurrency,\n    handleSubmitShipping,\n    shippingRef,\n    globalSetting,\n  };\n};\n\nexport default useFilter;\n"],"sourceRoot":""}